<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMvc快速入门</title>
    <url>/2020/01/12/SpringMvc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="SpringMvc框架介绍"><a href="#SpringMvc框架介绍" class="headerlink" title="SpringMvc框架介绍"></a>SpringMvc框架介绍</h2><p>关于三层架构：</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt=""></p>
<p>springmvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。</p>
<p>springmvc是一个基于mvc模式的web架构。</p>
<p>springmvc用于前后端的数据交互。</p>
<hr>
<h2 id="SpringMvc工作流程"><a href="#SpringMvc工作流程" class="headerlink" title="SpringMvc工作流程"></a>SpringMvc工作流程</h2><p>第一步：发送请求到前端控制器（DispatcherServlet）</p>
<p>第二步：前端控制器请求处理器映射器（HandlerMapping）查找Handler</p>
<p>第三步：处理器映射器返回Handler到前端控制器</p>
<p>第四步：前端控制器调用处理器适配器去执行Handler</p>
<p>第五步：处理器适配器去执行Handler</p>
<p>第六步：Handler执行完成给适配器返回ModelAndView</p>
<p>第七步：处理器适配器向前端控制器返回ModelAndView</p>
<p>ModelAndView是springmvc框架的一个底层对象，包括 Model和view</p>
<p>第八步：前端控制器请求视图解析器去进行视图解析</p>
<p>根据逻辑视图名解析成真正的视图(jsp)</p>
<p>第九步：视图解析器向前端控制器返回View</p>
<p>第十步：前端控制器进行视图渲染</p>
<p>视图渲染将模型数据(在ModelAndView对象中)填充到request域</p>
<p>第十一步：前端控制器向用户响应结果</p>
<hr>
<h2 id="SpringMvc快速上手"><a href="#SpringMvc快速上手" class="headerlink" title="SpringMvc快速上手"></a>SpringMvc快速上手</h2><h4 id="一-SpringMvc的相关配置"><a href="#一-SpringMvc的相关配置" class="headerlink" title="一.SpringMvc的相关配置"></a>一.SpringMvc的相关配置</h4><h5 id="1-所需的jar的引入"><a href="#1-所需的jar的引入" class="headerlink" title="1.所需的jar的引入"></a>1.所需的jar的引入</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;/dependencies&gt;</span></pre></td></tr></table></figure>

<h5 id="2-web-xml中的配置"><a href="#2-web-xml中的配置" class="headerlink" title="2.web.xml中的配置"></a>2.web.xml中的配置</h5><p>在web.xml中主要配置的是前端控制器，前端控制器的作用是：通过用户的url请求路径查找到匹配该请求的handler，在将用户的请求交由相应的handler处理。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置前端控制器 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;servlet&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">    &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">      &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;//指定配置文件所在位置，默认在WEB-INF下</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/init-param&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;/servlet&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;servlet-mapping&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;			//指定拦截的路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;/servlet-mapping&gt;</span></pre></td></tr></table></figure>

<h5 id="3-springmvc-xml的配置"><a href="#3-springmvc-xml的配置" class="headerlink" title="3.springmvc.xml的配置"></a>3.springmvc.xml的配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置视图解析器:解析转向页面，prefix:前缀，suffix：后缀</span></pre></td></tr><tr><td class="code"><pre><span class="line">    将controller层的返回值进行解析，加上前缀和后缀，就解析成了一个jsp页面，跳转到该页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">    --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;property name=<span class="string">"prefix"</span> value=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;property name=<span class="string">"suffix"</span> value=<span class="string">".jsp"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/bean&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!-- 注解扫描：将扫描配置的包，将符合要求的纳入spring容器 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"cn.fzkj.controller"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!-- 开启注解支持 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven/&gt;</span></pre></td></tr></table></figure>

<hr>
<h4 id="二-RequestMapping注解"><a href="#二-RequestMapping注解" class="headerlink" title="二.RequestMapping注解"></a>二.RequestMapping注解</h4><p>使用 @RequestMapping注解映射请求路径，就是将前端的请求交给具体的方法去执行。例如：</p>
<p>前端请求：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/login.action"&gt;登录&lt;/a&gt;</span></pre></td></tr></table></figure>

<p>Controller层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">userController</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>@RequestMapping(“/user”)是请求的前缀，主要用于对项目进行划分模块。@RequestMapping(“/login.action”)是请求的具体映射。SpringMvc会拦截所有请求（不准确），并在Controller对应的类中找符合的映射，交由该方法去处理。</p>
<h5 id="RequestMapping注解的属性"><a href="#RequestMapping注解的属性" class="headerlink" title="RequestMapping注解的属性"></a>RequestMapping注解的属性</h5><p>1.value:用于指定请求的url，和path属性的作用相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/login.action"</span>)</span></pre></td></tr></table></figure>

<p>2.method:用于指定请求的方式（GET、POST）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">""</span>,method=&#123;RequestMethod.GET&#125;)</span></pre></td></tr></table></figure>

<p>3.params:用于指定请求的参数，要求请求的key和value要和配置的相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">""</span>,method=&#123;&#125;,params=&#123;<span class="string">"username"</span>&#125;)<span class="comment">//必须传username参数</span></span></pre></td></tr></table></figure>

<hr>
<h4 id="三-请求参数的绑定"><a href="#三-请求参数的绑定" class="headerlink" title="三.请求参数的绑定"></a>三.请求参数的绑定</h4><p>==就是前端给后端传递参数==</p>
<ul>
<li>第一种：==基本类型==</li>
</ul>
<p>前端页面代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/login.action?username=mr"&gt;登录&lt;/a&gt;</span></pre></td></tr></table></figure>

<p>后端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(String username)</span></span>&#123;  <span class="comment">//参数名要和前端传递的参数名保持一致</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       System.out.println(<span class="string">"登录成功"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       System.out.println(<span class="string">"用户名:"</span>+username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr></table></figure>

<ul>
<li>第二种：==实体类型（javabean）==</li>
</ul>
<p>前端页面代码</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"user/user.action"</span> method=<span class="string">"POST"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;&lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> /&gt;&lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    账户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"account.name"</span> /&gt;&lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    金额:&lt;input type=<span class="string">"text"</span> name=<span class="string">"account.money"</span> /&gt;&lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/form&gt;</span></pre></td></tr></table></figure>

<p>==name属性要和JavaBean的属性名称一致==</p>
<p>后端页面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testuser</span><span class="params">(User user)</span></span>&#123; <span class="comment">//自动封装成JavaBean</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<hr>
<h4 id="四-注解"><a href="#四-注解" class="headerlink" title="四.注解"></a>四.注解</h4><h5 id="1-RequestParam注解"><a href="#1-RequestParam注解" class="headerlink" title="1.RequestParam注解"></a>1.RequestParam注解</h5><p>之前说控制层接收的参数名要和表现层传递的参数名保持一致，那如果不一致要怎么办呢？</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="user/login.action?username=mr"&gt;登录&lt;/a&gt;</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(String name)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"登录成功"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"用户名:"</span>+username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>前端传一个名为username的参数，而后端接收的却是name参数，按照之前讲的这样肯定是接收不到的。</p>
<p>RequstParam注解就是解决这个问题的</p>
<p>修改之后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"登录成功"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"用户名:"</span>+name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>RequestParam的参数就是前端传递的参数名，该注解会将接收到的参数保存到后面的变量中（即name中）</p>
<p>==要赋值的变量必须紧跟着RequestParam注解且在其后面==</p>
<h5 id="2-RequestBody注解"><a href="#2-RequestBody注解" class="headerlink" title="2.RequestBody注解"></a>2.RequestBody注解</h5><p>@RequestBody注解用来接收请求体的内容，请求方式必须是POST，GET请求无请求体。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"user/user.action"</span> method=<span class="string">"POST"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;&lt;br&gt;&lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     年龄:&lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> /&gt;&lt;br&gt;&lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &lt;/form&gt;</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testuser</span><span class="params">(@RequestBody String body)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(body);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">username=mr&amp;age=<span class="number">20</span></span></pre></td></tr></table></figure>

<h5 id="3-PathVariable注解"><a href="#3-PathVariable注解" class="headerlink" title="3.PathVariable注解"></a>3.PathVariable注解</h5><p>用于接收url中占位符的值</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="/user/testPathVariable/22"&gt;testPathVariable&lt;/a&gt;</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testPathVariable/&#123;id&#125;"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">22</span></span></pre></td></tr></table></figure>

<h4 id="五-响应的返回值"><a href="#五-响应的返回值" class="headerlink" title="五.响应的返回值"></a>五.响应的返回值</h4><h5 id="1-String类型"><a href="#1-String类型" class="headerlink" title="1.String类型"></a>1.String类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"登录成功"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"用户名:"</span>+name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>返回值类型为String，返回值会经过视图解析器解析成为jsp页面，最终显示。</p>
<h5 id="2-void类型"><a href="#2-void类型" class="headerlink" title="2.void类型"></a>2.void类型</h5><p>返回值是void类型的方法有三种跳转页面的方式</p>
<ul>
<li><p>请求转发</p>
</li>
<li><p>请求重定向</p>
</li>
<li><p>输出流</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testVoid.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"testVoid方法执行了...."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//1.请求转发(一次请求)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//       request.getRequestDispatcher("/WEBINF/jsp/success.jsp").forward(request,response);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//2.请求重定向（两次请求）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        response.sendRedirect(request.getContextPath()+"/index.jsp");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//3.直接向浏览器输出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        response.getWriter().print(<span class="string">"mr"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h5 id="3-ModelAndView对象类型"><a href="#3-ModelAndView对象类型" class="headerlink" title="3.ModelAndView对象类型"></a>3.ModelAndView对象类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//创建ModelAndView对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"testModelAndView执行了..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Account a =<span class="keyword">new</span> Account();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setMoney(<span class="number">1000.0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.setName(<span class="string">"lj"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        User user = <span class="keyword">new</span> User();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setUsername(<span class="string">"mr"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setAccount(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        user.setAge(<span class="number">20</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//把user对象存放到mv对象中，同时也会保存到request域中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        mv.addObject(<span class="string">"user"</span>,user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//设置要跳转的页面，默认经过试图解析器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        mv.setViewName(<span class="string">"success"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> mv;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h5 id="4-使用forward和redirect关键字进行页面跳转"><a href="#4-使用forward和redirect关键字进行页面跳转" class="headerlink" title="4.使用forward和redirect关键字进行页面跳转"></a>4.使用forward和redirect关键字进行页面跳转</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testGuanjianzi.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testGuanjianzi</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"登录成功1"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//使用forward请求转发</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//        return "forward:/WEB-INF/jsp/success.jsp";</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//redirect重定向</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h4 id="六-json格式的数据传递"><a href="#六-json格式的数据传递" class="headerlink" title="六.json格式的数据传递"></a>六.json格式的数据传递</h4><p>​    所需的jar包：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;2.9.0&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;2.9.0&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;2.9.0&lt;/version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/dependency&gt;</span></pre></td></tr></table></figure>

<p>使用ajax进行异步交互</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script src="js/jquery-3.4.1.min.js"&gt;&lt;/script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;script&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(document).ready(function()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">"#btn"</span>).click(function()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// alert("lala");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            $.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cache:<span class="keyword">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                url:<span class="string">"user/testAjax.action"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                contentType:<span class="string">"application/json;charset=utf-8"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data:<span class="string">'&#123;"username":"lj","age":20&#125;'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dataType:<span class="string">"json"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                success:function(data)&#123;	<span class="comment">//接收服务器端的响应数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="comment">//data:服务器端响应的数据,json格式的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    alert(data.username);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    alert(data.age);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                type:<span class="string">"post"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/script&gt;</span></pre></td></tr></table></figure>

<p>Controler层的接收方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span>   <span class="comment">//将返回值转换为json格式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testAjax.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testJson</span><span class="params">(@RequestBody User user)</span></span>&#123;	<span class="comment">//接收请求体</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(user);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//重新赋值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    user.setAge(<span class="number">21</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user.setUsername(<span class="string">"xlj"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> user;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<hr>
<h4 id="七-springmvc文件上传"><a href="#七-springmvc文件上传" class="headerlink" title="七.springmvc文件上传"></a>七.springmvc文件上传</h4><h5 id="1-springmvc文件上传"><a href="#1-springmvc文件上传" class="headerlink" title="1.springmvc文件上传"></a>1.springmvc文件上传</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;springmvc文件上传&lt;/h3&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"user/fileupload.action"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    选择文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"upload"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/form&gt;</span></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testFileUpLoad</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"springmvc文件上传"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//确定上传的路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">"/uploads/"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//判断该路径是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    File file = <span class="keyword">new</span> File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//创建文件夹</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        file.mkdirs();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//获取上传文件的名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String filename = upload.getOriginalFilename();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//设置名称为唯一值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename = uuid +<span class="string">"_"</span>+ filename;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//文件上传</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    upload.transferTo(<span class="keyword">new</span> File(path,filename));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h5 id="2-springmvc跨服务器文件上传"><a href="#2-springmvc跨服务器文件上传" class="headerlink" title="2.springmvc跨服务器文件上传"></a>2.springmvc跨服务器文件上传</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fileupload1.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testFileUpLoad1</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> IOException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"跨服务器文件上传"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//定义上传的服务器路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String path = <span class="string">"http://localhost:9090/uploads/"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//获取上传文件的名称</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String filename = upload.getOriginalFilename();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//设置名称为唯一值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename = uuid +<span class="string">"_"</span>+ filename;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//创建客户端对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Client client = Client.create();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//与图片服务器进行连接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    WebResource webResource = client.resource(path+filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//上传文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    webResource.put(upload.getBytes());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<hr>
<h4 id="八-异常处理"><a href="#八-异常处理" class="headerlink" title="八.异常处理"></a>八.异常处理</h4><p>定义异常类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//提示信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> String message;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.message = message;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> message;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.message = message;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>定义异常处理类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异常处理器类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 处理异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex:抛出的异常对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//获取到异常对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        SysException e = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> SysException)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e = (SysException)ex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e = <span class="keyword">new</span> SysException(<span class="string">"系统错误"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//创建ModelAndView对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mv.addObject(<span class="string">"errorMsg"</span>,e.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> mv;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>controller层:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testException.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> <span class="keyword">throws</span> SysException </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(<span class="string">"exception执行了..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//向上抛出异常</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SysException(<span class="string">"捕获到异常"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>springmvc.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置异常处理器 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sysExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"cn.fzkj.exception.SysExceptionResolver"</span> /&gt;</span></span></pre></td></tr></table></figure>

<p>==捕获到的异常都是交由异常处理类（SysExceptionResolver）处理的==</p>
<hr>
<h4 id="九-拦截器"><a href="#九-拦截器" class="headerlink" title="九.拦截器"></a>九.拦截器</h4><p>SpringMVC的处理器拦截器类似于Servlet中的过滤器（Filter），用于对处理器进行预处理和后处理。</p>
<p>==过滤器和拦截器的区别：==</p>
<p>过滤器：是servlet规范中的一部分，任何java web工程都能使用。在url-pattern中配置了==/*==之后，对所有的访问资源都会拦截。</p>
<p>拦截器：是SpringMvc自己的，只有使用SpringMvc框架的工程才能使用。且只会拦截访问的控制器中的方法。</p>
<p>要自定义拦截器，必须要实现==HandlerInterceptor==接口。</p>
<p>1.编写拦截器类</p>
<p>2.配置拦截器</p>
<p>拦截器类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义的拦截器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * 预处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：放行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"预处理执行了..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置拦截器 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;mvc:interceptor&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;!-- 配置拦截的方法--&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;mvc:mapping path=<span class="string">"/user/*"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;!--配置不拦截的方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;mvc:exclude-mapping path=<span class="string">""</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;!-- 注册拦截器--&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.fzkj.interceptor.DiyInterceptor"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/mvc:interceptor&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/mvc:interceptors&gt;</span></pre></td></tr></table></figure>

<hr>
<hr>
<blockquote class="blockquote-center"><p>结束语！</p>
<p>加油!</p>
</blockquote>

































]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring底层原理解析</title>
    <url>/2020/01/08/Spring%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>关于spring，应该重点掌握的就是spring的两大特性，<strong>控制反转</strong>和<strong>切面编程</strong></p>
<p>控制反转（IOC）：</p>
<p>​        在spring之前，我们创建对象都是自己手动new出来的,比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span></pre></td></tr></table></figure>

<p>​        这是之前我们创建对象的常用方式，而spring将这个过程进行了封装，帮我们创建对象，而我们需要使用的时候只需要去spring的容器中获取就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserDao userDao = (UserDao)BeanFactory.getBean(beanName:<span class="string">"userDao"</span>);</span></pre></td></tr></table></figure>

<p>看起来好像比之前的更复杂了，但是这样做却把程序间的耦合度降低了。</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/ioc.png" alt=""></p>
<p>这就是所谓的<strong>控制反转</strong>。</p>
<h3 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h3><p>那么spring是如何实现控制反转的呢？——<strong>反射</strong></p>
<h4 id="控制反转实现原理"><a href="#控制反转实现原理" class="headerlink" title="控制反转实现原理"></a>控制反转实现原理</h4><p>利用反射机制创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于创建Bean对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//定义一个Properties对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties pros;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//定义一个Map，用于存放要创建的对象。称之为容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//使用静态代码块为Properties赋值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//实例化对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            pros = <span class="keyword">new</span> Properties();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//获取Properties文件的流对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pros.load(in);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//实例化容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//取出配置文件中所有的key</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Enumeration keys = pros.keys();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//遍历枚举类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">while</span>(keys.hasMoreElements())&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//取出每个key</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                String key = keys.nextElement().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//获取key的value</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                String beanPath = pros.getProperty(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//通过反射创建对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object value = Class.forName(beanPath).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//把bean和value存入容器之中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                beans.put(key,value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//根据bean名称获取bean对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//beans是一个map集合，里面存放了bean对象，单例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>读取配置文件，获取配置文件中key所对应的value，也就是类的全限定路径名，在通过反射机制创建出对象</p>
<p>bean.properties:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">accoutService = cn.fzkj.service.Impl.AccoutServiceImpl</span></pre></td></tr><tr><td class="code"><pre><span class="line">accoutDao = cn.fzkj.dao.Impl.AccoutDaoImpl</span></pre></td></tr></table></figure>

<h3 id="切面编程（AOP）"><a href="#切面编程（AOP）" class="headerlink" title="切面编程（AOP）"></a>切面编程（AOP）</h3><p>基于代理思想，对原来的对象创建代理对象，从而在不改变原来代码的基础上对原有方法进行增强。</p>
<p>主要的应用场景：</p>
<ul>
<li>记录日志</li>
<li>性能监控</li>
<li>全限控制</li>
<li>缓存优化</li>
<li>事务管理</li>
</ul>
<h4 id="切面编程的实现原理"><a href="#切面编程的实现原理" class="headerlink" title="切面编程的实现原理"></a>切面编程的实现原理</h4><p>spring中的切面编程的实现主要有两种方式：</p>
<p>​    1.JDK动态代理</p>
<p>​    2.Cglib动态代理</p>
<h5 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="- JDK动态代理"></a>- JDK动态代理</h5><p>代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">final</span> IProducer pro = <span class="keyword">new</span> Producer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 动态代理：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *  特点：随用随创建，随用随加载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *  作用：不修改源码的基础上对方法进行加强</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *  分类：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *         1.基于接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *         2.基于子类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *   基于接口的动态代理：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      涉及的类：Proxy</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *   创建代理对象：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          proxy类中的newProxyInstance方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *   创建代理的要求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          被代理类最少实现一个接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *    newProxyInstance的参数：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          ClassLoader：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              用于加载代理对象字节码，和被代理对象使用相同的类加载器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          class[]:字节码数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              让代理对象和被代理对象有相同的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          InvocationHandler:用于提供增强的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              让我们写如何代理，一般写一个该接口的实现类，通常是匿名内部类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              此接口的实现类是谁用谁写</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(pro.getClass().getClassLoader(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pro.getClass().getInterfaces(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 * 作用：执行被代理对象的任何接口方法都会经过这个方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 * proxy：代理对象的引用</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 * method：当前执行的方法(描述对象)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 *      method.invoke(被代理对象，实际参数)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 * args：当前执行方法所需的参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 * 返回值：和被代理对象有相同的返回值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">//提供增强的代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(<span class="string">"前置"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">//2.判断当前执行的方法是否是销售</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName()))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            returnValue = method.invoke(pro,money*<span class="number">0.8f</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">return</span> returnValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        proxyProducer.saleProduct(<span class="number">10000f</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>service：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//销售</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(Float money)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"拿到钱:"</span>+money+<span class="string">"，销售产品"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//售后</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(Float money)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"提供售后，并拿到钱:"</span>+money);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/reuslt.png" alt="image-20200108135944083"></p>
<h5 id="Cglib动态代理"><a href="#Cglib动态代理" class="headerlink" title="- Cglib动态代理"></a>- Cglib动态代理</h5><p>代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">final</span> Producer pro = <span class="keyword">new</span> Producer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 动态代理：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *  特点：随用随创建，随用随加载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *  作用：不修改源码的基础上对方法进行加强</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *  分类：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *         1.基于接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *         2.基于子类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *   基于子类的动态代理：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      涉及的类：Enhancer</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *   创建代理对象：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          Enhancer类中的create方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *   创建代理的要求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          被代理类不能是最终类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *    create的参数：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          Class:字节码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              指定被代理对象的字节码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          Callback：用于提供增强</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              一半写的是该接口的子接口实现类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Producer cglibProducer = (Producer) Enhancer.create(pro.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             * 执行被代理对象的方法都会经过这个方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">             */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//提供增强的代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">//1.获取方法执行的参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                		System.out.println(<span class="string">"前置"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="comment">//2.判断当前执行的方法是否是销售</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName()))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            returnValue = method.invoke(pro,money*<span class="number">0.8f</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">return</span> returnValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cglibProducer.saleProduct(<span class="number">10000f</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Producer类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//销售</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(Float money)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"拿到钱:"</span>+money+<span class="string">"，销售产品"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//售后</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(Float money)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(<span class="string">"提供售后，并拿到钱:"</span>+money);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果:</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/reuslt.png" alt=""></p>
<p>spring的ioc和aop就结束了。</p>
<p><strong>扩展：</strong></p>
<p>aop中代理的实现，即spring是如何给目标对象创建代理类的</p>
<p>一个主方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">final</span> Producer pro = <span class="keyword">new</span> Producer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Producer p = (Producer) <span class="keyword">new</span> CglibProxyFactory(pro).getProxyInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p.saleProduct(<span class="number">10000f</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>可以看出，通过CglibProxyFactory类的getProxyInstance()方法得到的就是一个代理对象。</p>
<p>CglibProxyFactory类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建代理类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxyFactory</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//初始化对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> Object target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CglibProxyFactory</span><span class="params">(Object target)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.target = target;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//创建代理对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> Enhancer.create(target.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(<span class="string">"开始事务"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object returnValue = method.invoke(target, money*<span class="number">0.8f</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(<span class="string">"提交事务"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> returnValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/result1.png" alt="image-20200108141232177"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Wind Song</title>
    <url>/2019/12/10/Wind-Song/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E9%A3%8E%E4%B9%8B%E8%AF%97/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E9%A3%8E%E4%B9%8B%E8%AF%97/2.png" alt="2"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar.押尾</tag>
      </tags>
  </entry>
  <entry>
    <title>Twilight</title>
    <url>/2019/12/10/Twilight/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E9%BB%84%E6%98%8F/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E9%BB%84%E6%98%8F/2.png" alt="2"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E9%BB%84%E6%98%8F/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
        <tag>押尾</tag>
      </tags>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2019/12/10/%E6%97%A0%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%97%A0%E9%A2%98/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%97%A0%E9%A2%98/2.png" alt="2"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%97%A0%E9%A2%98/3.png" alt="3"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%97%A0%E9%A2%98/4.png" alt="4"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%97%A0%E9%A2%98/5.png" alt="5"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>奇迹的山</title>
    <url>/2019/12/10/%E5%A5%87%E8%BF%B9%E7%9A%84%E5%B1%B1/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E5%A5%87%E8%BF%B9%E7%9A%84%E5%B1%B1/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E5%A5%87%E8%BF%B9%E7%9A%84%E5%B1%B1/2.gif" alt="2"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E5%A5%87%E8%BF%B9%E7%9A%84%E5%B1%B1/3.png" alt="3"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E5%A5%87%E8%BF%B9%E7%9A%84%E5%B1%B1/4.png" alt="4"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
        <tag>岸部真明</tag>
      </tags>
  </entry>
  <entry>
    <title>天空之城</title>
    <url>/2019/12/10/%E5%A4%A9%E7%A9%BA%E4%B9%8B%E5%9F%8E/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E5%A4%A9%E7%A9%BA%E4%B9%8B%E5%9F%8E/1.jpg" alt="1"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
        <tag>久石让</tag>
      </tags>
  </entry>
  <entry>
    <title>time travel</title>
    <url>/2019/12/10/time-travel/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/time%20travel/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/time%20travel/2.png" alt="2"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/time%20travel/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
        <tag>岸部真明</tag>
      </tags>
  </entry>
  <entry>
    <title>first love</title>
    <url>/2019/12/10/first-love/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/first%20love/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/first%20love/2.png" alt="2"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/first%20love/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>fight</title>
    <url>/2019/12/10/fight/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/fight/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/fight/fight2.png" alt="2"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/fight/fight3.png" alt="3"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/fight/fight4.png" alt="4"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/fight/fight5.png" alt="5"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
        <tag>fight</tag>
      </tags>
  </entry>
  <entry>
    <title>always with me</title>
    <url>/2019/12/10/always-with-me/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/always%20with%20me/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/always%20with%20me/2.png" alt="2"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>流行的云</title>
    <url>/2019/12/10/%E6%B5%81%E8%A1%8C%E7%9A%84%E4%BA%91/</url>
    <content><![CDATA[<p>前两天看了一下流行的云的谱子，发现居然可以直接手撸，叼的。本身就很简单的一首取曲子。</p>
<p>​    <img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%B5%81%E8%A1%8C%E7%9A%84%E4%BA%91/1.png" alt="1"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%B5%81%E8%A1%8C%E7%9A%84%E4%BA%91/2.png" alt="2"></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/Guitar/pic/%E6%B5%81%E8%A1%8C%E7%9A%84%E4%BA%91/3.png" alt="3"></p>
]]></content>
      <categories>
        <category>爱好</category>
      </categories>
      <tags>
        <tag>Guitar</tag>
        <tag>流行的云</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm学习过程中遇到的问题</title>
    <url>/2019/12/07/ssm%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h5 id="2019-09-26："><a href="#2019-09-26：" class="headerlink" title="2019/09/26："></a>2019/09/26：</h5><p>1.配置包扫描器的时候把多写了类名，控制台报错No mapper…..</p>
<p>2.maven项目导不进jar包：</p>
<p>​                    出错原因：在pom.xml中添加依赖的时候外层多了denpendencyManegement标签对，导致jar包导不进，具体原因不清楚。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;denpendencyManagement&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&lt;denpendencies&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;/denpendencies&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/denpendencyManagement&gt;</span></pre></td></tr></table></figure>

<hr>
<h5 id="2019-09-27："><a href="#2019-09-27：" class="headerlink" title="2019/09/27："></a>2019/09/27：</h5><p>1.spring自动装配不了bean，即在service层使用@Autowired标签装配不了，报错是这样说的，忘记截屏了。</p>
<p>但是其实是我的service层调用Dao层的时候方法的返回值没有写，导致事务一直回滚，卡在那里。</p>
<h5 id="2019-10-05："><a href="#2019-10-05：" class="headerlink" title="2019/10/05："></a>2019/10/05：</h5><p>1.tomcat正常启动，项目部署正常，但是浏览器访问不了项目，404错误，但是访问项目中的<code>部分静态资源</code>正常</p>
<p>​    原因：静态资源加载时被 springmvc 配置的前端控制器拦截了，我当时的前端控制器是这样配置的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置前端控制器 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">-&lt;servlet&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&lt;!--初始化参数--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">-&lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class">&lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/init-param&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!--默认是在web-info下面加载.xml文件 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/servlet&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">-&lt;servlet-mapping&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/servlet-mapping&gt;</span></pre></td></tr></table></figure>

<p>​    所有的请求都被springmvc拦了下来。在url-pattern标签对中应该是*.action。拦截action，这样写的话，在Controller层的@RequestMapping(“”)中的地址就要以.action结尾才能拦截到。</p>
<p>同时，还要配置springmvc.xml，要把静态资源交给eclipse自带的servlet处理。添加两个标签：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-drivern/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;mvc:<span class="keyword">default</span>-servlet-handler/&gt;</span></pre></td></tr></table></figure>

<p>或者是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mvc:resources location=<span class="string">"classpath:/*"</span> mapping=<span class="string">"/**"</span>&gt;</span></pre></td></tr></table></figure>

<p>表示location下的资源可以使用路径直接访问</p>
<hr>
<h5 id="2019-10-13"><a href="#2019-10-13" class="headerlink" title="2019/10/13:"></a>2019/10/13:</h5><p><strong>图先欠着</strong></p>
<p>​    resultType：当使用resultType做SQL语句返回结果类型处理时，对于SQL语句查询出的字段在相应的pojo中必须有和它相同的字段对应，而resultType中的内容就是pojo在本项目中的位置。(返回的值都是固定的)</p>
<p>​    resultMap：当使用resultMap做SQL语句返回结果类型处理时，通常需要在mapper.xml中定义resultMap进行pojo和相应表字段的对应。(我理解的就是返回的值都是自定义的)</p>
<h5 id="2019-10-15："><a href="#2019-10-15：" class="headerlink" title="2019/10/15："></a>2019/10/15：</h5><p><strong>图欠着</strong></p>
<p>1.返回来的数据反不到js里面去，可能是因为返回的数据各式不是json的缘故。不是很懂。</p>
<p>且@Controller的方法返回值是null，经过试图解析器之后的url有点问题。</p>
<p>​    原因：Controller层的方法似乎默认执行完之后会经过试图解析器。会找一个jsp页面。</p>
<p>​    解决：这个注解会返回json格式的数据，就可以返回到js中。</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/wps1.jpg" alt="img"></p>
<hr>
<h5 id="2019-10-17："><a href="#2019-10-17：" class="headerlink" title="2019/10/17："></a>2019/10/17：</h5><p>1.在B方法中获取A方法的类（User）对象：</p>
<p>声明一个全局变量：private User user；</p>
<p>在A方法中给全局变量赋值：this.user=user;</p>
<p>B方法中调用</p>
<p>这是在Controller层要调用已经存在的User对象时候遇到的问题</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/wps3.jpg" alt="img"> </p>
<p>2.在jsp页面中显示回显信息：</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/wps4.jpg" alt="img"> </p>
<p>但是成功才会给”successinfo”设值，失败才会给failinfo设值，jsp页面写两句会包空指针</p>
<p>，至少一个没有（2019/10/20）搞定：使用jstl：使用request域存取数据比较好，因为request存取数据的作用域只是一次请求，session的作用域是一次会话。当一次提示之后就应该释放资源，不然下一次访问还会存在。msg.jsp中就会有多个信息。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- user_Active.action --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;!empty successinfo &#125;"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       	&lt;%=request.getAttribute(<span class="string">"successinfo"</span>) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;/c:if&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;!empty failinfo &#125;"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       	&lt;%=request.getAttribute(<span class="string">"failinfo"</span>) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;/c:if&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;!-- login.action --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;!empty loginerror &#125;"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       	&lt;%=request.getAttribute(<span class="string">"loginerror"</span>) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;/c:if&gt; </span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;!empty loginerror2 &#125;"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       	&lt;%=request.getAttribute(<span class="string">"loginerror2"</span>) %&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &lt;/c:if&gt;</span></pre></td></tr></table></figure>



<hr>
<h5 id="2019-10-20"><a href="#2019-10-20" class="headerlink" title="2019/10/20:"></a>2019/10/20:</h5><p>ModelAndView类的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findBypid.action"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findBypid</span><span class="params">(String pid)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="comment">//根据pid查询对应的商品</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		product pro = productService.findBypid(pid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">					跳转的页面  key	value</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"product"</span>,<span class="string">"product"</span>,pro);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr></table></figure>



<hr>
<h5 id="2019-10-27"><a href="#2019-10-27" class="headerlink" title="2019/10/27:"></a>2019/10/27:</h5><p>mybatis框架中使用不同类型的参数进行查询时，*mapper.xml中的parameter=””属性可以不用写，mybatis自动将参数封装成param1,param2…直接调用就可以</p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/wps6.jpg" alt="img"></p>
<hr>
<h5 id="2019-11-13"><a href="#2019-11-13" class="headerlink" title="2019/11/13:"></a>2019/11/13:</h5><p>mybatis中配置文件中的sql：</p>
<p>1.插入操作获取插入后的id值：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;selectKey keyProperty=<span class="string">"oid"</span> keyColumn=<span class="string">"oid"</span> resultType=<span class="string">"int"</span> order=<span class="string">"AFTER"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="function">select <span class="title">last_insert_id</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/selectKey&gt;</span></pre></td></tr></table></figure>

<p>2.使用<foreach>标签批量插入数据：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="function">insert into <span class="title">orderitem</span> <span class="params">(count,subtotal,pid,oid)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">			values</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">			&lt;foreach collection</span>=<span class="string">"orderItems"</span> item=<span class="string">"item"</span> separator=<span class="string">","</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			(</span></pre></td></tr><tr><td class="code"><pre><span class="line">				$&#123;item.count&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				$&#123;item.subtotal&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				$&#123;item.pro.pid&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				$&#123;oid&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			)</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;/foreach&gt;</span></pre></td></tr></table></figure>

<p>3.解决三表联合查询的问题：（嵌套使用<association>或者是<assoiation>）</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap type=<span class="string">"cn.fzkj.pojo.Order"</span> id=<span class="string">"orders"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;result property=<span class="string">"oid"</span> javaType=<span class="string">"java.lang.Integer"</span> column=<span class="string">"oid"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;result property=<span class="string">"total"</span> javaType=<span class="string">"java.lang.Double"</span> column=<span class="string">"total"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;result property=<span class="string">"ordertime"</span> javaType=<span class="string">"java.util.Date"</span> column=<span class="string">"ordertime"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;result property=<span class="string">"state"</span> javaType=<span class="string">"java.lang.Integer"</span> column=<span class="string">"state"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;result property=<span class="string">"name"</span> javaType=<span class="string">"java.lang.String"</span> column=<span class="string">"name"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;result property=<span class="string">"addr"</span> javaType=<span class="string">"java.lang.String"</span> column=<span class="string">"addr"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;result property=<span class="string">"phone"</span> javaType=<span class="string">"java.lang.String"</span> column=<span class="string">"phone"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;association property=<span class="string">"orderItems"</span> javaType=<span class="string">"cn.fzkj.pojo.OrderItem"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&lt;result property=<span class="string">"itemId"</span> javaType=<span class="string">"java.lang.Integer"</span> column=<span class="string">"itemid"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&lt;result property=<span class="string">"count"</span> javaType=<span class="string">"java.lang.Integer"</span> column=<span class="string">"count"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&lt;result property=<span class="string">"subtotal"</span> javaType=<span class="string">"java.lang.Double"</span> column=<span class="string">"subtotal"</span>/&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&lt;collection property=<span class="string">"pro"</span> javaType=<span class="string">"cn.fzkj.pojo.product"</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"pid"</span> javaType=<span class="string">"java.lang.Integer"</span> column=<span class="string">"pid"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"pname"</span> javaType=<span class="string">"java.lang.String"</span> column=<span class="string">"pname"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"market_price"</span> javaType=<span class="string">"java.lang.Double"</span> column=<span class="string">"market_price"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"shop_price"</span> javaType=<span class="string">"java.lang.Double"</span> column=<span class="string">"shop_price"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"image"</span> javaType=<span class="string">"java.lang.String"</span> column=<span class="string">"image"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"pdesc"</span> javaType=<span class="string">"java.lang.String"</span> column=<span class="string">"pdesc"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"is_hot"</span> javaType=<span class="string">"java.lang.String"</span> column=<span class="string">"is_hot"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"pdate"</span> javaType=<span class="string">"java.util.Date"</span> column=<span class="string">"pdate"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&lt;result property=<span class="string">"csid"</span> javaType=<span class="string">"java.lang.Integer"</span> column=<span class="string">"csid"</span> /&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&lt;/collection&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&lt;/association&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&lt;/resultMap&gt;</span></pre></td></tr></table></figure>

<hr>
<h5 id="2019-11-28："><a href="#2019-11-28：" class="headerlink" title="2019/11/28："></a>2019/11/28：</h5><p>1.在改js验证表单的功能，发现我不管怎么修改js代码，网页上没有变，换个浏览器就好了，应该是浏览器的缓存。百度了一下，果然是：</p>
<p>​    实际上你每次访问页面. 浏览器都会发起不同的请求获得页面中引入到的js/css/图片什么的. 而对于浏览器来说相同路径的文件除非你设置过不使用缓存, 否则每次都还是会优先从缓存中获得文件内容. 这样有助于节省你的网络开销。</p>
<p>​    解决方式：在引用的js的src后面加上时间戳或者一个随机数</p>
<p>2.把之前项目上的不影响运行的小红叉改掉了。具体原因看不懂，<a href="https://blog.csdn.net/u011781521/article/details/72903455" target="_blank" rel="noopener">解决链接</a></p>
<hr>
<h5 id="2019-12-07"><a href="#2019-12-07" class="headerlink" title="2019/12/07:"></a>2019/12/07:</h5><ul>
<li><p>1.git使用命令行同步仓库到github：</p>
<p>​    git add .  ：添加进暂存区</p>
<p>​    git commit -m’备注’    ：添加进版本库</p>
<p>​    git push -u origin master : 推送到github</p>
</li>
<li><p>2.在markdown中引用github上的图片床：（主要是要获取到github上的图片链接）</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/git.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/2308502963/images_stroe/master/images/git2.png" alt=""></p>
<p>​        然后就可以使用markdown的语法进行引用了。</p>
]]></content>
      <categories>
        <category>知识</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>置顶</title>
    <url>/2019/12/06/%E7%BD%AE%E9%A1%B6/</url>
    <content><![CDATA[<h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>无意间看到的一个东西，觉得挺有意思。就试试看<br>感觉也会给自己的学习提供一些帮助。</p>
<hr>
<p>记录一些学习过程中遇到的东西，障碍啊、新的知识啊等等</p>
<p>也记录一些自己喜欢的东西</p>
]]></content>
      <categories>
        <category>置顶</category>
      </categories>
      <tags>
        <tag>ideology</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown的使用</title>
    <url>/2019/12/06/Markdown%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="MarkDown的使用"><a href="#MarkDown的使用" class="headerlink" title="MarkDown的使用"></a>MarkDown的使用</h1><h2 id="1-代码块："><a href="#1-代码块：" class="headerlink" title="1.代码块："></a>1.代码块：</h2><h3 id="1-java代码块"><a href="#1-java代码块" class="headerlink" title="1.java代码块"></a>1.java代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello world！"</span>);</span></pre></td></tr></table></figure>

<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 一级</span></pre></td></tr><tr><td class="code"><pre><span class="line">## 二级</span></pre></td></tr><tr><td class="code"><pre><span class="line">### 三级</span></pre></td></tr><tr><td class="code"><pre><span class="line">#### 四级</span></pre></td></tr><tr><td class="code"><pre><span class="line">##### 五级</span></pre></td></tr><tr><td class="code"><pre><span class="line">###### 六级</span></pre></td></tr></table></figure>

<h1 id="一级"><a href="#一级" class="headerlink" title="一级"></a>一级</h1><h2 id="二级"><a href="#二级" class="headerlink" title="二级"></a>二级</h2><h3 id="三级"><a href="#三级" class="headerlink" title="三级"></a>三级</h3><h4 id="四级"><a href="#四级" class="headerlink" title="四级"></a>四级</h4><h5 id="五级"><a href="#五级" class="headerlink" title="五级"></a>五级</h5><h6 id="六级"><a href="#六级" class="headerlink" title="六级"></a>六级</h6><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加粗</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">**加粗**</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//高亮</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">==高亮显示的内容==</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//删除线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">~~删除线~~</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//斜线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">*斜线*</span></pre></td></tr></table></figure>

<p><strong>加粗</strong></p>
<p>==高亮显示==</p>
<p><del>删除线</del></p>
<p><em>斜线</em></p>
<h2 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用:"></a>4.引用:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用的语法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;作者：mr</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;作者:mr</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;作者:mr</span></pre></td></tr></table></figure>



<blockquote>
<p>作者：mr</p>
<blockquote>
<p>作者:mr</p>
<blockquote>
<p>作者:mr</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="5-分割线："><a href="#5-分割线：" class="headerlink" title="5.分割线："></a>5.分割线：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分割线1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">///2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">***</span></pre></td></tr></table></figure>

<hr>
<hr>
<h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图片的插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">![图片名称](图片路径)</span></pre></td></tr></table></figure>

<p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=57eb9359da09b3deffb2ec3aadd607e4/b151f8198618367adb114bec25738bd4b31ce562.jpg" alt="图片名称"></p>
<h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">[点击](url)</span></pre></td></tr></table></figure>

<p><a href="https://2308502963.github.io">我的GitHub主页</a></p>
<hr>
<hr>
<h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 目录一</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 目录二</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 目录三</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="comment">//有序列表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">1</span>+.+名称</span></pre></td></tr></table></figure>

<ul>
<li>目录一</li>
<li>目录二</li>
<li>目录三</li>
</ul>
<p>1.首页</p>
<p>2.分类</p>
<h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><table>
<thead>
<tr>
<th>成绩</th>
<th>语文</th>
<th>数学</th>
</tr>
</thead>
<tbody><tr>
<td>mr</td>
<td>21</td>
<td>432</td>
</tr>
<tr>
<td>lj</td>
<td>321</td>
<td>321</td>
</tr>
</tbody></table>
<h2 id="10-引用视频-音频"><a href="#10-引用视频-音频" class="headerlink" title="10.引用视频/音频"></a>10.引用视频/音频</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">```</span></pre></td></tr><tr><td class="code"><pre><span class="line">html	选择html</span></pre></td></tr><tr><td class="code"><pre><span class="line">```</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;video id=<span class="string">"video"</span> controls=<span class="string">""</span> preload=<span class="string">"none"</span> poster=<span class="string">""</span>&gt;		<span class="comment">//加载封面</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;source id=<span class="string">"mp4"</span> src=<span class="string">""</span> type=<span class="string">"video/mp4"</span>&gt;		<span class="comment">//资源路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;/video&gt;</span></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;audio id=<span class="string">"audio"</span> &gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;source id=<span class="string">""</span> src=<span class="string">""</span>&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;/audio&gt;</span></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>标记语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>你好，世界!</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
